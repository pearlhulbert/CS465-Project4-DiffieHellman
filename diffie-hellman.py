
import os
import math
import sys
# print(sys.getrecursionlimit())
sys.setrecursionlimit(1010)

# result of openssl safe random prime number generator
p = 3125131390042612799148888503965207286688551997366077778677217994287316890279229496356076456547959633516259876591379707846290150938671208459853998661459

a = 2592467434919754397428328757007326708818966749473729234232786716329323863687002698043166076143662658621075287464936624179055841159803012649743370087607
b = 1287517725278773503241876322205798263967433460366043048576376313928112629035489594278378127083234094345742119066133700502271631917442192756832031995756
def mod_exp(x, y, N):
    # This is an implementation of modular exponentiation
    # Time complexity: O(n^3)
    # Space complexity: O(n^2)
    if y == 0:
        return 1
    z = mod_exp(x, math.floor(y / 2), N)
    if y % 2 == 0:
        return (z ** 2) % N
    else:
        return (x * z ** 2) % N

def diffie_hellman(a, p):
    g = 5
    key_a = mod_exp(g, a, p)
    print("key_a: ", key_a)
    # a_b = g ** (a * b)
    # print(a_b)
    g = 1945026677762589282969787899244332387785887787991097465252728893836126990777779626305143693988273373946688836665004115877751981845400578870075250568078
    key_b = mod_exp(g, a, p)
    print("secret_key: ", key_b)

diffie_hellman(a, p)